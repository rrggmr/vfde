{"remainingRequest":"/Users/sorens/Documents/GitHub/vfde-inv-var-ui-demo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/sorens/Documents/GitHub/vfde-inv-var-ui-demo/src/components/dashboard/config/data_sources/DataSourceEditor.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/sorens/Documents/GitHub/vfde-inv-var-ui-demo/src/components/dashboard/config/data_sources/DataSourceEditor.vue","mtime":1639653885445},{"path":"/Users/sorens/Documents/GitHub/vfde-inv-var-ui-demo/node_modules/cache-loader/dist/cjs.js","mtime":1639655034192},{"path":"/Users/sorens/Documents/GitHub/vfde-inv-var-ui-demo/node_modules/babel-loader/lib/index.js","mtime":1639655034093},{"path":"/Users/sorens/Documents/GitHub/vfde-inv-var-ui-demo/node_modules/cache-loader/dist/cjs.js","mtime":1639655034192},{"path":"/Users/sorens/Documents/GitHub/vfde-inv-var-ui-demo/node_modules/vue-loader/lib/index.js","mtime":1639655080628}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["DataSourceEditor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyfile":"DataSourceEditor.vue","sourceRoot":"src/components/dashboard/config/data_sources","sourcesContent":["<template>\n  <div class=\"playground_holder\">\n    <h2>Datasource Editor</h2>\n    <b-modal\n        id=\"confirmEdit\"\n        :title=\"`${$t('Möchten Sie den erweiterten Editor verwenden?')}`\"\n        v-model=\"showModal\"\n        @ok=\"pythonCodeConfirmEdit(true)\"\n        @cancel=\"pythonCodeConfirmEdit(false)\"\n    >\n      <p>{{$t(\"Möchten Sie den Python-Code direkt bearbeiten? In diesem Fall wird der Basiseditor deaktiviert.\")}}</p>\n    </b-modal>\n    <b-tabs v-model=\"selectedTab\" :key=\"tabsKey\" class=\"sub-tabs\">\n      <!-- Basic editor tab -->\n      <b-tab :title=\"$t('Basiseditor')\" :active=\"selectedTab === 0\" :disabled=\"usingAdvancedEditor\">\n        <b-card class=\"basic editor\">\n          <div class=\"details\">\n            <div class=\"datasource-name\">\n              <div>\n                <h3>{{$t('Name der Datenquelle')}}</h3>\n                <input @input=\"uuidGenerate\" v-model=\"datasourceName\" type=\"text\" name=\"datasource-name\" />\n              </div>\n              <div>\n                <h3>ID</h3>\n                <div class=\"locked\">\n                  <input\n                      type=\"text\"\n                      id=\"uuid\"\n                      class=\"uuid greyed-out\"\n                      v-model=\"datasourceUUID\"\n                      :disabled=\"uuidDisabled\"\n                  />\n                  <b-button\n                      v-if=\"uuidDisabled\"\n                      variant=\"outline-secondary\"\n                      class=\"subtle edit-button\"\n                      @click=\"uuidAllowFreetext\"\n                  >\n                    ✎\n                  </b-button>\n                </div>\n              </div>\n            </div>\n            <DatasourceEditorButtons @run=\"run()\" @save=\"save()\" />\n          </div>\n          <div class=\"fields\">\n            <div class=\"drag-n-drop\">\n              <h3>{{$t('Felder ziehen und ablegen')}}</h3>\n              <span\n                  v-for=\"field in fields\" :key=\"field\" :field=\"field\"\n                  class=\"field\"\n                  @dragstart=\"fieldsSetFieldType(fieldsNew(field))\"\n                  draggable=\"true\"\n              >\n                     {{ field }}\n                     </span>\n            </div>\n            <div class=\"schema\">\n              <h3>{{$t('Schema')}}</h3>\n              <table id=\"schema\" class=\"table schema\">\n                <tr>\n                  <th class=\"hide-on-mobile\"></th>\n                  <th>{{$t('Feldname')}}</th>\n                  <th>{{$t('Feldtyp')}}</th>\n                  <th>Nullable</th>\n                  <th class=\"actions \">\n                    <b-button @click=\"fieldsAdd\" variant=\"outline-secondary\" class=\"add\">\n                      +\n                    </b-button>\n                  </th>\n                </tr>\n                <tr\n                    v-for=\"(line, index) in schema\"\n                    :key=\"`schema_line_${index}`\"\n                    draggable=\"true\"\n                    @dragstart=\"fieldsSetFieldType(schema[index], true)\"\n                    @drop=\"fieldsDrop\"\n                    @dragover=\"fieldsDragOverRow\"\n                    @dragleave=\"fieldsLeaveRow\"\n                >\n                  <td class=\"dragIcon hide-on-mobile\">☰</td>\n                  <td class=\"fieldName\"><input class=\"subtle input\" v-model=\"schema[index].name\" :placeholder=\"$t('Feldname')\" /></td>\n                  <td class=\"fieldType\">\n                    <select class=\"subtle\" v-model=\"schema[index].fieldType\">\n                      <option v-for=\"field in fields\" :key=\"`option_${field}`\">{{field}}</option>\n                    </select>\n                  </td>\n                  <td>\n                    <b-checkbox v-model=\"schema[index].nullable\" switch />\n                  </td>\n                  <td class=\"actions\">\n                    <b-button v-if=\"index > 0\" variant=\"outline-danger\" @click=\"fieldsDelete(index)\" class=\"subtle delete\">x</b-button>\n                  </td>\n                </tr>\n              </table>\n            </div>\n            <div class=\"dataTypes\">\n              <div class=\"datasourceType\">\n                <h3>{{$t('Datenquellentyp')}}</h3>\n                <select class=\"subtle\" v-model=\"datasourceType\">\n                  <option v-for=\"(format, index) in datasourceTypes\" :value=\"index\" :key=\"`format_${format.name}`\">{{format.name}}</option>\n                </select>\n              </div>\n              <div class=\"streaming\">\n                <h3>{{$t('Streaming')}}</h3>\n                <b-form-checkbox v-model=\"streaming\" switch />\n              </div>\n            </div>\n            <div class=\"options\">\n              <h3>{{$t('Optionen')}}</h3>\n              <table id=\"options\" class=\"table options\">\n                <tr>\n                  <th class=\"option-key\">{{$t('Optionsschlüssel')}}</th>\n                  <th>{{$t('Optionswert')}}</th>\n                  <th class=\"actions\">\n                    <b-button @click=\"optionsAdd\" variant=\"outline-secondary\" class=\"add\">\n                      +\n                    </b-button>\n                  </th>\n                </tr>\n                <tr\n                    v-for=\"(line, index) in options\"\n                    :key=\"`option_${index}`\"\n                >\n                  <td class=\"optionKey\">\n                    <div class=\"locked\" v-if=\"!options[index].freeText\">\n                      <select class=\"subtle wide\" v-model=\"options[index].key\" >\n                        <option\n                            v-for=\"(option, index) in datasourceTypes[datasourceType].options\"\n                            :key=\"`option_${index}`\"\n                        >\n                          {{ option }}\n                        </option>\n                      </select>\n                      <b-button\n                          variant=\"outline-secondary\"\n                          class=\"subtle small-button\"\n                          @click=\"optionsMakeKeyFreeText\"\n                      >\n                        ✎\n                      </b-button>\n                    </div>\n                    <input class=\"subtle wide\" v-else v-model=\"options[index].key\" :placeholder=\"$t('Optionsschlüssel')\" />\n                  </td>\n                  <td class=\"optionValue\">\n                    <input class=\"subtle input\" v-model=\"options[index].value\" :placeholder=\"$t('Optionswert')\" />\n                  </td>\n                  <td class=\"actions\">\n                    <b-button v-if=\"index > 0\" variant=\"outline-danger\" @click=\"optionsDelete(index)\" class=\"subtle delete\">x</b-button>\n                  </td>\n                </tr>\n              </table>\n            </div>\n          </div>\n        </b-card>\n      </b-tab>\n      <!-- Advanced editor tab -->\n      <b-tab :title=\"$t('fortgeschrittener Editor')\" :active=\"selectedTab === 1\" @click=\"pythonCodeRefresh\" >\n        <b-card class=\"advanced editor\">\n          <div class=\"advancedName\">\n            <div>\n              <h3>{{$t('Name der Datenquelle')}}</h3>\n              <input v-model=\"datasourceName\" type=\"text\" name=\"datasource-name\" />\n            </div>\n            <DatasourceEditorButtons @run=\"run()\" @save=\"save()\" />\n          </div>\n          <h3>Python editor</h3>\n          <div class=\"codeEditor\">\n            <codemirror\n                id=\"pythonEditor\"\n                @input=\"pythonCodeCheckEdit\"\n                @focus=\"updatingFromBasic = false; pythonCodeCache = pythonCode\"\n                @blur=\"updatingFromBasic = true\"\n                v-model=\"pythonCode\"\n                :options=\"codeMirrorOptionsPythonEditor\"\n            />\n          </div>\n        </b-card>\n      </b-tab>\n    </b-tabs>\n    <!-- Results -->\n    <b-card class=\"results table\">\n      <div class=\"resultsHeader\">\n        <h3>{{ $t('Ergebnisse') }}</h3>\n        <DatasourceEditorButtons mobile @run=\"run()\" @save=\"save()\" />\n      </div>\n      <table class=\"results\" v-if=\"results\">\n        <tr>\n          <th v-for=\"key in results['keys']\" :key=\"`key_${key}`\">{{key}}</th>\n        </tr>\n        <tr v-for=\"(row, index) in results['values']\" :key=\"`row_${index}`\">\n          <td v-for=\"(value, index) in row\" :key=\"`value_${index}`\" >{{value}}</td>\n        </tr>\n      </table>\n      <p v-else>\n        {{$t(\"Eine Vorschau der ersten 15 Ergebniszeilen wird hier angezeigt, wenn Sie Ihren Test erstellen und ausführen.\")}}\n      </p>\n    </b-card>\n  </div>\n</template>\n<script>\nimport debounce from 'debounce'\nimport store from \"@/store/store\";\nimport conf, {fakeData} from \"@/config\"\nimport commonMethods from \"@/mixins/commonMethods\";\nimport DatasourceEditorButtons from \"@/components/dashboard/config/data_sources/DatasourceEditorButtons\";\nimport axios from \"axios\";\n\nexport default {\n  name: \"DataSourceEditor\",\n  components: {DatasourceEditorButtons},\n  mixins: [\n    commonMethods\n  ],\n  methods: {\n\n    // Datasource methods\n    checkForDatasource() {\n      if (this.datasourceId) {\n        // Dummy data, needs to be replaced with either an API call or getting the data from memory.\n        const datasource = fakeData.dataSources[0]\n\n        if (datasource.editorConfig.advanced) {\n          this.selectedTab = 1\n          this.tabsKey = Date.now()\n          this.pythonCode = datasource.pythonCode\n          this.usingAdvancedEditor = true\n        }\n        this.datasourceUUID = datasource.editorConfig.id.value\n        if (datasource.editorConfig.id.freeText) {\n          this.uuidAllowFreetext(false)\n        }\n        this.datasourceName = datasource.name\n        this.getDatasourceType(datasource.editorConfig.type)\n        this.streaming = datasource.editorConfig.streaming\n        this.schema = datasource.editorConfig.fields\n        this.options = datasource.editorConfig.options\n        this.dateModified = datasource.modified\n        this.dateCreated = this.sqlDate(datasource.created)\n      } else {\n        this.datasourceUUID = this.datasourceUUIDDefault\n        this.dateCreated = this.sqlDate()\n        this.dateModified = this.sqlDate()\n      }\n    },\n    getDatasourceType(type) {\n      for (let i = 0; i < this.datasourceTypes.length; i++) {\n        if (this.datasourceTypes[i].name === type) {\n          this.datasourceType = i\n        }\n      }\n    },\n    async run() {\n      this.pythonCodeGenerate();\n      // Fake API request to get some dummy data until the backend is ready.\n      const url = 'https://mocki.io/v1/de7ddbfc-3683-42d1-b6ca-1d98e95bb6ae'\n      const results = await axios.get(url);\n      this.results = results.data;\n    },\n    async save() {\n      this.pythonCodeGenerate();\n      const datasourceToSave = {\n        name: this.datasourceName,\n        editorConfig: {\n          id: {\n            value: this.datasourceUUID,\n            freeText: !this.uuidDisabled,\n          },\n          type: this.datasourceType,\n          streaming: this.streaming,\n          fields: this.schema,\n          options: this.options,\n          advanced: this.usingAdvancedEditor\n        },\n        pythonCode: this.pythonCode,\n        created: this.dateCreated,\n        modified: this.sqlDate(),\n      }\n      // Temporarily logging, this will be sent to the API to be saved.\n      console.log(datasourceToSave)\n    },\n\n\n    // Fields methods\n    fieldsAdd() {\n      this.schema.push(this.fieldsNew(this.fields[0]))\n    },\n    fieldsDelete(index) {\n      this.schema.splice(index, 1)\n    },\n    fieldsNew(fieldType) {\n      return {\n        name: '',\n        fieldType: fieldType,\n        nullable: false\n      }\n    },\n    fieldsSetFieldType(field, move = false) {\n      this.currentField = field\n      if (move) {\n        this.originalIndex = event.currentTarget.rowIndex-1\n      }\n    },\n    fieldsDragOverRow(event) {\n      event.preventDefault();\n      event.currentTarget.classList.add('currentRow');\n    },\n    fieldsLeaveRow(event) {\n      event.currentTarget.classList.remove('currentRow');\n    },\n    fieldsDrop(event) {\n      event.preventDefault();\n      // Delete the original row if necessary\n      if (this.originalIndex !== null) {\n        // Needs to check specifically for null as otherwise row 0 is treated as falsy\n        this.schema.splice(this.originalIndex, 1)\n      }\n      // Add the new or cloned item\n      let targetRow = event.currentTarget.rowIndex\n      if (this.originalIndex !== null) {\n        if (this.originalIndex <= targetRow-1) {\n          targetRow --\n        }\n      }\n      this.schema.splice(targetRow, 0, this.currentField)\n      event.currentTarget.classList.remove('currentRow');\n      this.originalIndex = null\n    },\n\n    // Options methods\n    optionsAdd() {\n      const option = {\n        key: 'path',\n        value: '',\n        freeText: false\n      }\n      this.options.push(option)\n    },\n    optionsDelete(index) {\n      this.options.splice(index, 1)\n    },\n    optionsMakeKeyFreeText(event) {\n      event.preventDefault()\n      const optionIndex = event.currentTarget.parentNode.parentNode.parentNode.rowIndex - 1\n      this.options[optionIndex].freeText = true\n      const inputs = event.currentTarget.parentNode.parentNode.getElementsByTagName('input')\n      // Set very short timeout to give it time to render before focussing.\n      setTimeout(function(){ inputs[0].focus() }, 10);\n\n    },\n\n    // Python Code methods\n    pythonCodeCheckEdit() {\n      if (!this.usingAdvancedEditor && !this.updatingFromBasic) {\n        this.showModal = true\n      }\n    },\n    pythonCodeConfirmEdit(confirm) {\n      this.showModal = false;\n      this.usingAdvancedEditor = confirm;\n      if (!confirm) {\n        this.pythonCode = this.pythonCodeCache\n      }\n    },\n    pythonCodeGenerate() {\n      if (!this.usingAdvancedEditor) {\n        // Only automatically generate Python code if the user is using the basic editor.\n        this.pythonCode = this.pythonCodeGetSchema() + conf.python.newLine\n        this.pythonCode += 'df = spark.read'\n        if (this.streaming) {\n          this.pythonCode += 'Stream'\n        }\n        this.pythonCode += conf.python.lineBreak\n        this.pythonCode += conf.python.tab + `.format(\"${this.datasourceTypes[this.datasourceType].name}\")` + conf.python.lineBreak\n        this.pythonCode += this.pythonCodeGetOptions()\n        this.pythonCode += conf.python.tab + `.schema(schema)` + conf.python.lineBreak\n        this.pythonCode += conf.python.tab + `.load()` + conf.python.newLine\n        this.pythonCode += `df.createOrReplaceTempView(\"${this.datasourceUUID}\")`\n      }\n    },\n    pythonCodeGetSchema() {\n      let pythonSchema = '' +\n          'schema = StructType([\\n'\n      this.schema.forEach(\n          (field) => {\n            pythonSchema += conf.python.tab + `StructField(\"${field.name}\", ${field.fieldType}(), ${field.nullable}),\\n`\n          }\n      );\n      pythonSchema += '])'\n      return pythonSchema\n    },\n    pythonCodeGetOptions() {\n      let pythonOptions = ''\n      this.options.forEach(\n          (option) => {\n            pythonOptions += conf.python.tab + `.option(\"${option.key}\", \"${option.value}\")` + conf.python.lineBreak\n          }\n      )\n      return pythonOptions\n    },\n    pythonCodeRefresh() {\n      this.pythonCodeGenerate()\n    },\n\n    // UUID methods\n    uuidAllowFreetext(focus = true) {\n      this.uuidDisabled = false;\n      const uuidEditor = document.getElementById(\"uuid\")\n      uuidEditor.classList.remove('greyed-out')\n      if (focus) {\n        // Set very short timeout to give it time to render before focussing.\n        setTimeout(function(){ uuidEditor.focus() }, 10);\n      }\n    },\n    uuidGenerate: debounce(function () {\n      // Don't generate a new id if freetext mode has been unlocked.\n      if (this.uuidDisabled) {\n        // Produce a default if the name has been deleted entirely\n        if (!this.datasourceName) {\n          this.datasourceUUID = this.datasourceUUIDDefault\n        }\n        else {\n          // Lowercase and replace non alpha-numeric characters with dashes,\n          // and limit to one dash between each valid character\n          this.datasourceUUID = this.datasourceName\n              .toLowerCase()\n              .trim()\n              .replace(/[^(a-z0-9-)]/g, '-')\n              .replace(/-+(?=-)/g,'')\n          // Trim dashes from beginning and end of the stirng\n          if (this.datasourceUUID.startsWith('-')) {\n            this.datasourceUUID = this.datasourceUUID.substring(1)\n          }\n          if (this.datasourceUUID.endsWith('-')) {\n            this.datasourceUUID = this.datasourceUUID.slice(0, -1)\n          }\n\n          // Check if the uuid already exists, attach time to uuid if so\n          let duplicateIndex = store.state.datasourceIds.indexOf(this.datasourceUUID)\n          if (duplicateIndex > -1) {\n            const currentTime = Date.now().toString()\n            this.datasourceUUID += '-' + (currentTime.substr(-5, 5))\n          }\n        }\n      }\n    }, conf.debounce.default),\n\n  },\n  mounted() {\n    this.checkForDatasource()\n  },\n  props: {\n    datasourceId: String\n  },\n  data() {\n    return {\n      currentField: '',\n      codeMirrorOptionsJSON: conf.cmOptions,\n      codeMirrorOptionsPythonEditor: conf.pythonEditorOptions,\n      datasourceName: null,\n      datasourceUUID: null,\n      datasourceUUIDDefault: \"datasource-\" + Date.now().toString().substr(-5, 5),\n      datasourceType: 0,\n      datasourceTypes: [...conf.datasourceTypes.sort(),{name: 'other', options: ['path']}],\n      dateCreated: null,\n      dateModified: null,\n      fields: conf.sparkFields.sort(),\n      options: [\n        {\n          key: 'path',\n          value: '',\n          freeText: false\n        }\n      ],\n      originalIndex: null,\n      pythonCode: null,\n      pythonCodeCache: null,\n      results: null,\n      schema: [\n        {\n          name: '',\n          fieldType: 'StringType',\n          nullable: false\n        }\n      ],\n      selectedTab: null,\n      showModal: false,\n      streaming: false,\n      tabsKey: Date.now(),\n      usingAdvancedEditor: false,\n      updatingFromBasic: true,\n      uuidDisabled: true\n    }\n  },\n}\n\n</script>\n<style lang='scss' scoped>\nh2 {\n  font-size: 1.25em;\n}\n.fields {\n  display: grid;\n  justify-content: left;\n  align-items: start;\n  grid-gap: 2em;\n  grid-template-areas: \"drag-n-drop schema\"\n   \"datatypes schema\"\n   \"options schema\";\n  .drag-n-drop {\n    grid-area: drag-n-drop;\n  }\n  .schema {\n    grid-area: schema;\n  }\n  .options {\n    grid-area: options;\n  }\n  .dataTypes {\n    grid-area: datatypes;\n  }\n}\n.disabled {\n  color:#999 !important;\n}\n.vue-codemirror {\n  &#pythonEditor {\n    .CodeMirror {\n      height: auto;\n      padding:1em;\n      border-radius: .5em;\n    }\n  }\n}\n.sub-tabs {\n  .nav-tabs {\n    border-bottom-width: 2px;\n    .nav-item {\n      .nav-link {\n        background-color: transparent !important;\n        padding: 0 1em .6em 1em;\n        border: none !important;\n        box-shadow: none !important;\n        font-weight: normal !important;\n        &:hover {\n          font-weight: bold !important;\n          color: #e60000 !important;\n        }\n        &.active {\n          background-color: transparent;\n          font-weight: bold !important;\n          cursor: default;\n          border-bottom:3px solid #e60000 !important;\n          &:hover {\n            color: inherit !important;\n          }\n        }\n      }\n    }\n  }\n}\n</style>\n"]}]}
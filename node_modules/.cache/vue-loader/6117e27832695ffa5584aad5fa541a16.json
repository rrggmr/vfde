{"remainingRequest":"/Users/sorens/Documents/GitHub/vfde-inv-var-ui-demo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/sorens/Documents/GitHub/vfde-inv-var-ui-demo/src/components/dashboard/aws/FileExplorer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/sorens/Documents/GitHub/vfde-inv-var-ui-demo/src/components/dashboard/aws/FileExplorer.vue","mtime":1639653885442},{"path":"/Users/sorens/Documents/GitHub/vfde-inv-var-ui-demo/node_modules/cache-loader/dist/cjs.js","mtime":1639655034192},{"path":"/Users/sorens/Documents/GitHub/vfde-inv-var-ui-demo/node_modules/babel-loader/lib/index.js","mtime":1639655034093},{"path":"/Users/sorens/Documents/GitHub/vfde-inv-var-ui-demo/node_modules/cache-loader/dist/cjs.js","mtime":1639655034192},{"path":"/Users/sorens/Documents/GitHub/vfde-inv-var-ui-demo/node_modules/vue-loader/lib/index.js","mtime":1639655080628}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["FileExplorer.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2HA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"FileExplorer.vue","sourceRoot":"src/components/dashboard/aws","sourcesContent":["<template>\n  <div>\n    <div v-if=\"!environmentError\">\n      <ul class=\"action_icons\" v-if=\"folderExists\">\n        <li style=\"right:8rem\"><font-awesome-icon class=\"filter\" icon=\"filter\" /><input v-model=\"filter\" /></li>\n        <li id=\"button_refresh\" style=\"right:8rem; font-size: .8em; top:0.125em\">\n          <a href=\"#\" @click.prevent=\"refresh\"><font-awesome-icon icon=\"redo-alt\" /></a>\n        </li>\n        <li id=\"button_create_folder\" style=\"right:6rem\">\n          <a href=\"#\" @click.prevent=\"showNewFolderModal\"><font-awesome-icon icon=\"folder-plus\" /></a>\n        </li>\n        <li id=\"button_upload_file\" style=\"right:4rem; font-size: .9em\">\n          <a href=\"#\" @click.prevent=\"showUploadModal\"><font-awesome-icon icon=\"file-upload\" /></a>\n        </li>\n        <li id=\"button_delete\" style=\"right:2rem; font-size: .8em;\">\n          <a href=\"#\" @click.prevent=\"showDeleteModal\"><font-awesome-icon alt=\"Delete selected files\" icon=\"trash\" /></a>\n        </li>\n      </ul>\n      <b-tabs>\n        <b-tab :title=\"$t('AWS-Datei-Explorer')\" >\n          <b-card>\n            <ul class=\"breadcrumb\" >\n              <li\n                  @click=\"openFolder(breadcrumb.key)\"\n                  :class=\"breadcrumbClass\"\n                  :key=\"`breadcrumb_${breadcrumb.name}`\"\n                  v-for=\"breadcrumb in breadcrumbs\">\n                <span v-if=\"isHome(breadcrumb.name)\">{{$t(\"Hauptseite\")}}</span>\n                <span v-else-if=\"folderExists\">{{breadcrumb.name}}</span>\n              </li>\n            </ul>\n            <Loading v-if=\"loading\" />\n            <div v-else>\n              <b-table\n                  v-if=\"folderExists\"\n                  show-empty\n                  id=\"fileExplorerTable\"\n                  :items=\"tableData\"\n                  :fields=\"explorerConfig.fields\"\n                  :filter=\"filter\"\n                  empty-text=\"There are no items in this folder.\"\n                  :per-page=\"perPage\"\n                  :current-page=\"currentPage\"\n              >\n                <template v-slot:cell(selected)=\"data\">\n                  <b-form-checkbox v-model=\"data.item.selected\"/>\n                </template>\n                <template v-slot:cell(type)=\"data\">\n                  <font-awesome-icon class=\"file-type\" :icon=\"data.value\" />\n                </template>\n                <template v-slot:cell(Name)=\"data\">\n                  <a href=\"#\" @click.prevent=\"openObject(data.item, $event)\">\n                    {{ data.item.Name.replace('/', '') }}\n                  </a>\n                </template>\n              </b-table>\n              <p v-else>404. This folder does not exist.</p>\n              <b-pagination\n                  v-if=\"rows > perPage\"\n                  v-model=\"currentPage\"\n                  :total-rows=\"rows\"\n                  :per-page=\"perPage\"\n                  aria-controls=\"fileExplorerTable\"\n              ></b-pagination>\n            </div>\n          </b-card>\n        </b-tab>\n      </b-tabs>\n      <b-modal ref=\"upload-modal\" hide-footer title=\"Upload a file to S3\" size=\"lg\">\n        <b-form id=\"uploadForm\" @submit.prevent=\"uploadFiles\" v-if=\"!uploading\">\n          <b-form-file\n              v-model=\"filesToUpload\"\n              :state=\"Boolean(filesToUpload)\"\n              placeholder=\"Browse to files or drag and drop here.\"\n              drop-placeholder=\"Drag and drop files here.\"\n              name=\"files_to_upload\"\n              multiple\n          ></b-form-file>\n          <b-button class=\"upload-button\" type=\"submit\" variant=\"primary\" :disabled=\"!filesToUpload.length\">Submit</b-button>\n        </b-form>\n        <div style=\"padding:1em\" id=\"progress-bar\" :key=\"progressBarKey\" v-else>\n          <b-table :items=\"uploaded\" :fields=\"uploadedFields\" striped outlined thead-class=\"d-none\" >\n            <template v-slot:cell(progress)=\"data\">\n              <div class=\"s3-progress-bar\">\n                <div class=\"numbers\">{{data.item.loaded}} / {{data.item.total}}</div>\n                <div class=\"fill\" :style=\"`width:${data.item.progress}%`\"></div>\n              </div>\n            </template>\n            <template v-slot:cell(status)=\"data\">\n              <font-awesome-icon v-if=\"data.item.status==='waiting'\" class=\"status-icon waiting\" icon=\"ellipsis-h\" />\n              <font-awesome-icon v-if=\"data.item.status==='uploading'\" class=\"status-icon uploading\" icon=\"arrow-alt-circle-up\" />\n              <font-awesome-icon v-if=\"data.item.status==='complete'\" class=\"status-icon complete\" icon=\"check-circle\" />\n            </template>\n          </b-table>\n        </div>\n      </b-modal>\n      <b-modal ref=\"create-folder-modal\" hide-footer title=\"Create a folder\">\n        <b-form @submit.prevent=\"newFolder\">\n          <b-form-input v-model=\"newFolderName\" name=\"newFolder\" />\n          <b-button :disabled=\"!newFolderName\" class=\"upload-button\" type=\"submit\" variant=\"primary\">Submit</b-button>\n        </b-form>\n      </b-modal>\n      <b-modal ref=\"delete-modal\" hide-footer title=\"Confirm you want to delete the following items\">\n        <p>If you delete folders, you will also delete any subfolders and items they contain.</p>\n        <b-form @submit.prevent=\"deleteFiles\">\n          <ul v-if=\"filesToDelete.length\">\n            <li :key=\"`file_to_delete_${index}`\" v-for=\"(file, index) in filesToDelete\">{{file.Name}}</li>\n          </ul>\n          <p v-else>No files are selected.</p>\n          <b-button :disabled=\"!filesToDelete.length\" class=\"upload-button\" type=\"submit\" variant=\"danger\">Delete</b-button>\n        </b-form>\n      </b-modal>\n    </div>\n    <div v-else>\n      <p>\n        AWS File Explorer isn't available right now. It should be back online soon!\n      </p>\n    </div>\n  </div>\n</template>\n\n<script>\n\nimport moment from \"moment-timezone\"\nimport Loading from \"@/components/Loading\";\n\nexport default {\n  name: \"FileExplorer\",\n  components: {Loading},\n  mounted() {\n    if (!this.environmentError) {\n      this.aws.config.update(\n          {\n            region: this.explorerConfig.region,\n            accessKeyId: this.explorerConfig.accessKey,\n            secretAccessKey: this.explorerConfig.secretKey,\n            correctClockSkew: true,\n            signatureVersion: 'v4'\n          }\n      );\n      this.s3 = new this.aws.S3({apiVersion: this.explorerConfig.api});\n      this.updateExplorerFromRoute()\n    } else {\n      console.log(\"Environment error: Are your environment variables set up correctly?\")\n    }\n\n  },\n  data() {\n    try {\n      return {\n        aws: require('aws-sdk'),\n        currentPage:1,\n        perPage:25,\n        uploaded: [],\n        filesUploaded: 0,\n        loading: true,\n        progressBarKey: this.randomKey(),\n        uploadedFields: [\n          'name',\n          'progress',\n          'status'\n        ],\n        folderExists: false,\n        uploading: false,\n        explorerConfig: {\n          accessKey: process.env.VUE_APP_S3_ACCESS_KEY,\n          secretKey: process.env.VUE_APP_S3_SECRET_KEY,\n          prefix: process.env.VUE_APP_S3_DEFAULT_FOLDER,\n          home: process.env.VUE_APP_S3_DEFAULT_FOLDER.replace('/', ''),\n          bucket: process.env.VUE_APP_S3_BUCKET,\n          region: process.env.VUE_APP_S3_REGION,\n          api: process.env.VUE_APP_S3_API_VERSION,\n          fields: [\n            'selected',\n            {\n              key: 'type',\n              sortable: true,\n              sortByFormatted: true,\n              formatter: (value) => {\n                const fileType = value.toLowerCase()\n                let icon\n                switch (fileType) {\n                    // Folder\n                  case 'folder':\n                    icon = 'folder-open'\n                    break;\n                    //  Audio formats\n                  case 'm4a':\n                  case 'flac':\n                  case 'mp3':\n                  case 'wav':\n                  case 'wma':\n                  case 'aac':\n                    icon = 'file-audio'\n                    break\n                    //  Video formats\n                  case 'mp4':\n                  case 'mov':\n                  case 'wmv':\n                  case 'avi':\n                  case 'avchd':\n                  case 'flv':\n                  case 'f4v':\n                  case 'swf':\n                  case 'webm':\n                  case 'mpeg-2':\n                    icon = 'file-video'\n                    break\n                    // Archive formats\n                  case 'zip':\n                  case 'rar':\n                  case 'gz':\n                  case '7z':\n                    icon = 'file-archive'\n                    break\n                    // Image formats\n                  case 'gif':\n                  case 'jpg':\n                  case 'jpeg':\n                  case 'svg':\n                  case 'bmp':\n                  case 'png':\n                  case 'psd':\n                  case 'ai':\n                    icon = 'file-image'\n                    break\n                    // Excel\n                  case 'xls':\n                  case 'xlsx':\n                    icon = 'file-excel'\n                    break\n                    // Word\n                  case 'doc':\n                  case 'docx':\n                    icon = 'file-word'\n                    break\n                    // Powerpoint\n                  case 'ppt':\n                  case 'pptx':\n                    icon = 'file-powerpoint'\n                    break\n                    // CSV\n                  case 'csv':\n                    icon = 'file-csv'\n                    break\n                    // PDF\n                  case 'pdf':\n                    icon = 'file-pdf'\n                    break\n                    // Text file\n                  case 'txt':\n                    icon = 'file-alt'\n                    break\n                    // If no match default to a blank file icon\n                  default:\n                    icon = 'file'\n                }\n                return icon\n              }\n            },\n            {\n              key: 'Name',\n              sortable: true,\n              tdClass: 'text-left'\n            },\n            {\n              key: 'LastModified',\n              sortable: true,\n              formatter: (value) => {\n                return moment(value).tz(this.timeZone).format(\"DD/MM/YYYY HH:mm:ss\")\n              }\n            },\n            {\n              key: 'Size',\n              sortable: true,\n              formatter: (value) => {\n                return this.humanFileSize(value)\n              },\n            },\n          ]\n        },\n        timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n        s3Objects: [],\n        s3: null,\n        tableData: [],\n        breadcrumbs: [],\n        newFolderName: \"\",\n        filesToDelete: [],\n        filesToUpload: [],\n        foldersToDelete: [],\n        filter: \"\",\n        downloaded: 0,\n        breadcrumbKey: this.randomKey(),\n        environmentError: false\n      }\n    }\n    catch {\n      return {\n        environmentError: true\n      }\n    }\n  },\n  computed: {\n    rows() {\n      return this.tableData.length\n    },\n    breadcrumbClass() {\n      if (this.folderExists) {\n        return \"breadcrumb-item\"\n      }\n      return \"\"\n    }\n  },\n  watch: {\n    $route() {\n      this.updateExplorerFromRoute()\n    }\n  },\n  methods: {\n    refresh() {\n      this.getObjects(this.explorerConfig.prefix)\n    },\n    updateExplorerFromRoute() {\n      let folderPath = this.$route.path.replace('/aws','')\n      let fullPath = this.explorerConfig.home  + folderPath\n      if (fullPath.substr(-1) != \"/\") {\n        fullPath+=\"/\"\n      }\n      this.explorerConfig.prefix = fullPath\n      this.getObjects(this.explorerConfig.prefix)\n    },\n    isHome(breadcrumb) {\n      return breadcrumb === this.explorerConfig.home\n    },\n    randomKey(min = 1, max = 1000) { // min and max included\n      return Math.floor(Math.random() * (max - min + 1) + min)\n    },\n    showDeleteModal() {\n      this.filesToDelete = []\n      for (let i=0; i<this.tableData.length; i++) {\n        const currentItem = this.tableData[i]\n        if (currentItem.selected) {\n          this.filesToDelete.push(currentItem)\n        }\n      }\n      this.$refs['delete-modal'].show()\n    },\n    showUploadModal() {\n      this.filesToUpload = []\n      this.$refs['upload-modal'].show()\n    },\n    showNewFolderModal() {\n      this.filesToUpload = []\n      this.$refs['create-folder-modal'].show()\n    },\n    openObject(item, event) {\n      if(this.isFolder(item)) {\n        this.openFolder(item.Key)\n      } else {\n        const placeholder = event.target\n        const downloadInformation = document.createElement('div')\n        downloadInformation.innerHTML = \"Preparing download of \" + event.target.text + \"<span>(0/0)</span>\"\n        event.target.replaceWith(downloadInformation)\n        this.openFile(item, placeholder, downloadInformation)\n      }\n    },\n    openFolder(folder) {\n      const newRoute = folder.replace(this.explorerConfig.home, '/aws')\n      this.$router.push(newRoute);\n    },\n    openFile(item, placeholder, downloadInformation) {\n      const tracker = downloadInformation.getElementsByTagName('span')[0]\n      const component = this\n      tracker.innerHTML = `(0/${component.humanFileSize(item.Size)})`\n      this.s3.getObject(\n          { Bucket: component.explorerConfig.bucket, Key: item.Key },\n          function (error, data) {\n            if (error != null) {\n              console.log(error)\n            } else {\n              const blob = new Blob([data.Body], {type: `${data.ContentType}`})\n              const fileURL = window.URL.createObjectURL(blob);\n              const fileLink = document.createElement('a');\n              fileLink.text = \"Download again\"\n              fileLink.href = fileURL;\n              fileLink.setAttribute('download', item.Name);\n              document.body.appendChild(fileLink);\n              downloadInformation.replaceWith(placeholder)\n              downloadInformation.appendChild(fileLink)\n              fileLink.click();\n            }\n          }\n      ).on('httpDownloadProgress', function(progress){\n        console.log(progress)\n        tracker.innerHTML = `(${component.humanFileSize(progress.loaded)}/${component.humanFileSize(progress.total)})`\n      });\n    },\n    deleteFiles() {\n      const component = this\n      let deleteFilesPromise = new Promise(function(resolveDelete, rejectDelete) {\n        let deletedFiles\n        let numberOfFiles = component.filesToDelete.length\n        component.foldersToDelete = []\n        for(deletedFiles=0; deletedFiles<numberOfFiles; deletedFiles++) {\n          component.deleteFile(component.filesToDelete[deletedFiles])\n        }\n        if (deletedFiles === numberOfFiles) {\n          resolveDelete(numberOfFiles + \" files deleted\");\n        } else {\n          rejectDelete(\"Error\");\n        }\n      });\n      deleteFilesPromise.then( (message)=> {\n            console.log(message)\n            if (this.foldersToDelete.length) {\n              for (let folderToDelete = 0; folderToDelete < this.foldersToDelete.length; folderToDelete++) {\n                this.deleteFolder(this.foldersToDelete[folderToDelete])\n              }\n            }\n            this.getObjects(this.explorerConfig.prefix)\n        }\n      )\n    },\n    deleteFolder(folder) {\n      const component = this\n      let params = {\n        Bucket: this.explorerConfig.bucket,\n        Prefix: folder\n      }\n      component.s3.listObjects(params, function(err, data) {\n        if (err) {\n          console.log(\"Error\", err);\n        } else {\n          const folderFiles = data.Contents\n          component.filesToDelete = []\n          for (let i=0; i < folderFiles.length; i++) {\n            let folderFile = {}\n            folderFile.Key = folderFile.Name = folderFiles[i].Key\n            component.filesToDelete.push(folderFile)\n          }\n          component.deleteFiles()\n        }\n      })\n    },\n    deleteFile(file) {\n      if (this.isFolder(file)) {\n        this.foldersToDelete.push(file.Key)\n      }\n      const component = this\n      let params = {\n        Bucket: this.explorerConfig.bucket,\n        Key: file.Key\n      };\n      this.s3.deleteObject(params, function(err, data) {\n        if (err) {\n          console.log(\"FAILED\", err, err.stack); // an error occurred\n        }\n        else {\n          component.$refs['delete-modal'].hide()\n          if (data) {\n            component.getObjects(component.explorerConfig.prefix)\n          }\n        }\n      });\n    },\n    s3ToTableData() {\n      this.tableData = []\n      if (this.s3Objects.length) {\n        this.folderExists = true\n      } else {\n        this.folderExists = false\n      }\n      for (let i=0; i < this.s3Objects.length; i++) {\n        const s3Item = this.s3Objects[i]\n        let item = {}\n        let push = false\n        item.Name = s3Item.Key.replace( new RegExp(`^${this.explorerConfig.prefix}`), \"\");\n        if (item.Name !== \"\") {\n          // Don't include blank names (that's the folder we're in now)\n          const slashes = item.Name.split(\"/\").length - 1;\n          if (slashes === 0) {\n            // This is a file in this folder, push it to the items.\n            push = true\n          }\n          if (slashes === 1) {\n            // Might be a folder, or could be a file in a different folder\n            if (this.isFolder(item)) {\n              // Folder, push it to items.\n              push = true\n            }\n          }\n          if (push) {\n            item.LastModified = s3Item.LastModified\n            item.Size = s3Item.Size\n            item.Key = s3Item.Key\n            item.selected = false\n            item.type = this.getFileType(item.Name)\n            this.tableData.push(item)\n          }\n        }\n      }\n      this.loading = false\n    },\n    getFileType(fileName) {\n      const fileParts = fileName.split('.')\n      if (fileParts.length === 1) {\n        return \"folder\"\n      } else {\n        return fileParts[fileParts.length - 1]\n      }\n    },\n    humanFileSize(bytes, si=true, dp=2) {\n      if (bytes === 0) {\n        return '-'\n      }\n      const thresh = si ? 1000 : 1024;\n\n      if (Math.abs(bytes) < thresh) {\n        return bytes + ' B';\n      }\n\n      const units = si\n          ? ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n          : ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];\n      let u = -1;\n      const r = 10**dp;\n\n      do {\n        bytes /= thresh;\n        ++u;\n      } while (Math.round(Math.abs(bytes) * r) / r >= thresh && u < units.length - 1);\n\n\n      return bytes.toFixed(dp) + ' ' + units[u];\n    },\n    newerThan (date, hours) {\n      const hour= 1000 * 60 * 60;\n      return date > Date.now() - (hour * hours)\n    },\n    isFolder(item) {\n      return item.Name.slice(-1) === '/'\n    },\n    newFolder() {\n      this.$refs['create-folder-modal'].hide()\n      this.newFolderName = this.newFolderName.replace(/\\W+/g, '-').replace(/-$/, '').toLowerCase();\n      this.createFolder(this.newFolderName)\n      this.newFolderName = \"\"\n    },\n    getObjects(prefix) {\n      const component = this\n      this.explorerConfig.prefix = prefix\n      // Create the parameters for calling listObjects\n      let bucketParams = {\n        Bucket : this.explorerConfig.bucket,\n        Prefix: prefix\n      };\n\n      // Call S3 to obtain a list of the objects in the bucket\n      this.s3.listObjects(bucketParams, function(err, data) {\n        if (err) {\n          console.log(\"Error\", err);\n        } else {\n          component.s3Objects = data.Contents\n          component.s3ToTableData()\n          component.getBreadcrumbs()\n        }\n      });\n    },\n    getBreadcrumbs() {\n      let breadcrumbs = []\n      let key = \"\"\n      const pieces = this.explorerConfig.prefix.split(\"/\")\n      for (let i=0; i < pieces.length-1; i++) {\n        key += pieces[i] + \"/\"\n        const crumb = {\n          name: pieces[i],\n          key: key\n        }\n        breadcrumbs.push(crumb)\n      }\n      this.breadcrumbs = breadcrumbs\n    },\n    async uploadFiles() {\n      this.uploading = true\n      this.uploaded = [];\n      this.filesUploaded = 0;\n      const component = this\n      for (let i=0; i<this.filesToUpload.length; i++) {\n        const file = this.filesToUpload[i]\n        component.uploaded[i] = {\n          name: file.name,\n          progress: 0,\n          loaded: 0,\n          total: component.humanFileSize(file.size),\n          status: \"waiting\"\n        }\n        const uploadParams = {\n          Bucket: this.explorerConfig.bucket,\n          Key: (this.explorerConfig.prefix || '') + (file.fullPath ? file.fullPath : file.name),\n          Body: file,\n          ContentType: file.type\n        };\n        const options = {partSize: 5 * 1024 * 1024, queueSize: 10};\n        this.s3.upload (uploadParams, options, function (err, data) {\n          if (err) {\n            console.log(\"Error\", err);\n            component.$refs['upload-modal'].hide()\n            alert('We couldn\\'t upload this file.')\n          } if (data) {\n            // File fully uploaded\n            component.progressBarKey = component.randomKey()\n            component.filesUploaded++;\n            if (component.filesUploaded === component.filesToUpload.length) {\n              // ALL FILES UPLOADED\n              component.$refs['upload-modal'].hide()\n              component.getObjects(component.explorerConfig.prefix)\n              component.uploading = false\n            }\n          }\n        }).on('httpUploadProgress', function(progress){\n          // progress also lists key etc and size\n          const percentUploaded = progress.loaded / progress.total * 100\n          if (percentUploaded > component.uploaded[i].progress) {\n            // Don't refresh the page on every tick, it'll crash the browser.\n            component.uploaded[i].progress = percentUploaded\n            component.uploaded[i].loaded = component.humanFileSize(progress.loaded)\n            component.uploaded[i].total = component.humanFileSize(progress.total)\n            component.progressBarKey = component.randomKey()\n          }\n          if (progress.total > progress.loaded) {\n            component.uploaded[i].status = 'uploading'\n          } else {\n            component.uploaded[i].status = 'complete'\n          }\n          console.log(progress)\n        });\n\n      }\n    },\n    createFolder(folder) {\n      const key = this.explorerConfig.prefix + folder + '/'\n      const component = this\n      const uploadParams = {\n        Bucket: this.explorerConfig.bucket,\n        Key: key,\n        Body: '',\n        ACL: \"private\"\n      };\n      this.s3.upload (uploadParams, function (err, data) {\n        if (err) {\n          console.log(\"Error\", err);\n        } if (data) {\n          component.getObjects(component.explorerConfig.prefix)\n        }\n      });\n    }\n  },\n}\n</script>\n\n<style lang=\"scss\">\n\n.action_icons {\n  list-style: none;\n  display: inline-block;\n  position: absolute;\n  right:2em;\n  li {\n    display: inline-block;\n    position: absolute;\n    .filter {\n      position: absolute;\n      top:.25em;\n      color: rgb(200, 200, 200);\n      margin-left: -1.5em;\n    }\n    input {\n      margin-right:1em;\n      margin-top:-1em;\n      width:15em;\n      padding: 0 .5em;\n    }\n    a {\n      color: rgba(90,90,90,1);\n      &:hover {\n        color: #990000\n      }\n      svg {\n        position: absolute;\n        height:1.5em !important;\n        width:1.5em !important;\n        margin-right: .5em;\n      }\n    }\n  }\n}\n\n.upload-button {\n  margin-top:1em;\n  font-size: .9em !important;\n}\n.modal-header h5 {\n  font-size: 1em;\n}\n\n.modal-dialog {\n  font-size: .9em;\n  placeholder {\n    font-size: .9em !important;\n  }\n}\n\n#fileExplorerTable {\n  th {\n    &:nth-of-type(1), &:nth-of-type(2) {\n      width: 2em;\n    }\n    &:nth-of-type(4), &:nth-of-type(5) {\n      width: 12em;\n    }\n  }\n}\n\n.modal-header h5 {\n  font-size: 1em;\n}\n\n.status-icon {\n  height:1em; width:1em;\n  &.complete {\n    color: rgba(40,120,40, .8);\n  }\n  &.uploading, &.waiting {\n    color: rgba(40,40,40, .4);\n  }\n\n}\n\n.folder-icon {\n  margin-right:1em\n}\n\n.s3-progress-bar {\n  width: 15em;\n  height:1.5em;\n  z-index: 4;\n  border: 1px solid rgba(40,120,40, .5);\n  border-radius: .125em;\n  .fill {\n    background: rgb(140,220,140);\n    height:1.375em;\n    z-index: 3;\n    border-radius: .125em;\n    transition: width .1s ease-in-out;\n  }\n  .numbers {\n    position: absolute;\n    width:15em;\n    text-align: center;\n  }\n}\n.text-left {\n  padding-left:1em !important;\n}\n.file-type {\n  font-size: 24px;\n  color: #5a5a5a;\n}\n\n.breadcrumb {\n  border-radius: .25em !important;\n  margin-bottom: 2em !important;\n}\n\n.breadcrumb-item {\n  cursor: pointer;\n  color: #cc0000;\n  text-decoration: underline;\n\n  &:hover {\n    color: #2b2b2b;\n  }\n\n  &:last-child {\n    cursor: default;\n    color: inherit;\n    text-decoration: none;\n  }\n}\n\n.inactive {\n  font-weight: bold;\n\n  &:after {\n    content: \":\";\n    display: inline-block;\n    width: 1em;\n  }\n}\n\n.disabled {\n  &.btn-primary, &.btn-danger {\n    color: rgba(255,255,255,.5) !important;\n  }\n}\n\n\n</style>\n"]}]}
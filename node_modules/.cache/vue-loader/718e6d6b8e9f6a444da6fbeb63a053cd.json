{"remainingRequest":"/Users/sorens/Documents/GitHub/vfde-inv-var-ui-demo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/sorens/Documents/GitHub/vfde-inv-var-ui-demo/src/components/dashboard/config/data_sources/DataSourceEditor.vue?vue&type=template&id=0b155b5c&scoped=true&","dependencies":[{"path":"/Users/sorens/Documents/GitHub/vfde-inv-var-ui-demo/src/components/dashboard/config/data_sources/DataSourceEditor.vue","mtime":1639653885445},{"path":"/Users/sorens/Documents/GitHub/vfde-inv-var-ui-demo/node_modules/cache-loader/dist/cjs.js","mtime":1639655034192},{"path":"/Users/sorens/Documents/GitHub/vfde-inv-var-ui-demo/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1639655080628},{"path":"/Users/sorens/Documents/GitHub/vfde-inv-var-ui-demo/node_modules/cache-loader/dist/cjs.js","mtime":1639655034192},{"path":"/Users/sorens/Documents/GitHub/vfde-inv-var-ui-demo/node_modules/vue-loader/lib/index.js","mtime":1639655080628}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}